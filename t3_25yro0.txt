---
kind: thread
author: tobiasgw
domain: self.haskell
is_self: true
created: 1400527450
permalink: /r/haskell/comments/25yro0/any_advice_for_my_haskell_workshop/
id: 25yro0
name: t3_25yro0
subreddit: haskell
subreddit_id : t5_2qh36
title: Any advice for my Haskell workshop?
url: https://www.reddit.com/r/haskell/comments/25yro0/any_advice_for_my_haskell_workshop/
---

I would love to hear some of your thoughts on this "introduction to Haskell" workshop I'm planning. I suspect some of you have experience as teachers/lecturers and knows a thing or two about teaching Haskell.

I have about 6 hours for the whole thing and my main goal is to get people interested enough that they will study Haskell themselves afterwards (and come to my next workshop :)

The participants are all experienced developers, but their understanding of functional programming ranges from novice to expert. And I can safely assume they are all novices in Haskell.

The guiding principles I have come up with so far is as follows:
* Give some motivation for WHY they should endure the initial "pain" when learning Haskell
* Compare language features to Java, C# and Javascript (because they're all familiar with at least one of those)
* Short lectures of about 20-30 minutes followed by the participants getting their hands dirty by solving assignments related to the topic. Rinse and repeat 5-6 times
* Don't wait with introducing IO - otherwise I fear their misconception of Haskell being unfit for real world applications will only be enforced. 
* Ideally have a lot of TAs around to help people who are stuck (... inside the IO monad)
* Provide some words of advise for further learning (such as staying away from monad tutorials and don't get intimidated by mathy stuff)

My agenda for the day looks like this:

0. Introduction to Haskell and motivational speech
1. Functions
	* Hello world
	* function definition
	* function application
2. IO and do-notation
	* putStrLn
	* getLine
3. Datatypes
	* Common datatypes
	* Type signatures
	* Defining your own datatypes
	* Typeclasses 
4. The Standard Library (with friends)
5. A larger assignment combining all of the above
6. Wrap-up and advice for further exploration


... to sum up my questions:
1) Any thoughts on my guiding principles or the agenda?
2) Anything in particular you have noticed when teaching Haskell that I should be aware of?
3) Should I use GHCi or compile/run from a file?

Thank you ever so much for the feedback!

